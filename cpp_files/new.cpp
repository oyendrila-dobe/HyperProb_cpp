#include<vector>
#include"z3++.h" 
using namespace z3;
int main()
 { 
   context c;
    solver s(c);
    expr b = c.bool_val(true);
    expr a_0 = c.int_const("a_0");
    b = a_0 == 0;
    b = b || a_0 == 1;
    s.add(b);
    expr a_1 = c.int_const("a_1");
    b = a_1 == 0;
    b = b || a_1 == 1;
    s.add(b);
    expr a_2 = c.int_const("a_2");
    b = a_2 == 0;
    s.add(b);
    expr a_3 = c.int_const("a_3");
    b = a_3 == 0;
    b = b || a_3 == 1;
    s.add(b);
    expr a_4 = c.int_const("a_4");
    b = a_4 == 0;
    s.add(b);
    expr a_5 = c.int_const("a_5");
    b = a_5 == 0;
    s.add(b);
    expr a_6 = c.int_const("a_6");
    b = a_6 == 0;
    b = b || a_6 == 1;
    s.add(b);
    expr a_7 = c.int_const("a_7");
    b = a_7 == 0;
    s.add(b);
    expr a_8 = c.int_const("a_8");
    b = a_8 == 0;
    s.add(b);
    expr a_9 = c.int_const("a_9");
    b = a_9 == 0;
    b = b || a_9 == 1;
    s.add(b);
    expr a_10 = c.int_const("a_10");
    b = a_10 == 0;
    s.add(b);
    expr a_11 = c.int_const("a_11");
    b = a_11 == 0;
    s.add(b);
    expr a_12 = c.int_const("a_12");
    b = a_12 == 0;
    s.add(b);
    expr a_13 = c.int_const("a_13");
    b = a_13 == 0;
    b = b || a_13 == 1;
    s.add(b);
    expr a_14 = c.int_const("a_14");
    b = a_14 == 0;
    s.add(b);
    expr a_15 = c.int_const("a_15");
    b = a_15 == 0;
    s.add(b);
    expr a_16 = c.int_const("a_16");
    b = a_16 == 0;
    s.add(b);
    expr a_17 = c.int_const("a_17");
    b = a_17 == 0;
    s.add(b);
    expr a_18 = c.int_const("a_18");
    b = a_18 == 0;
    s.add(b);
    expr a_19 = c.int_const("a_19");
    b = a_19 == 0;
    s.add(b);
    expr a_20 = c.int_const("a_20");
    b = a_20 == 0;
    s.add(b);
    expr a_21 = c.int_const("a_21");
    b = a_21 == 0;
    s.add(b);
    expr a_22 = c.int_const("a_22");
    b = a_22 == 0;
    s.add(b);
    expr a_23 = c.int_const("a_23");
    b = a_23 == 0;
    s.add(b);
    std::cout << s<< "\n";
    std::cout << s.check() << "\n";
    model m = s.get_model();
    for (unsigned i = 0; i < m.size(); i++) {
        func_decl v = m[i];
        assert(v.arity() == 0);
        std::cout << v.name() << " = " << m.get_const_interp(v) << "\n";
    }
}